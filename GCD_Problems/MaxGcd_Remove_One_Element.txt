//Q1) Program to find gcd.
public class Solution {
    public int gcd(int A, int B) {
            if(A<B) return gcd(B,A);
            else if(B==1) return 1;
            else if (A==0 || B==0) return Math.max(A,B);
            else return gcd(B,A%B);
    }
}


Q2) Given an integer array A of size N. You have to delete one element such that the GCD(Greatest common divisor) of the remaining array is maximum.
Find the maximum value of GCD.
A=[12,15,18]
If you delete 12, gcd will be 3.
If you delete 15, gcd will be 6.
If you delete 18, gcd will 3.
Maximum vallue of gcd is 6.

public class Solution {
    
    public int gcd(int A, int B) {
            if(A<B) return gcd(B,A);
            else if(B==1) return 1;
            else if (A==0 || B==0) return Math.max(A,B);
            else return gcd(B,A%B);
    }
    
    public int solve(ArrayList<Integer> A) {
     int max1=Integer.MIN_VALUE;
     if(A.size()==1) return A.get(0);
     int Prefix[]=new int[A.size()];
     int Suffix[]=new int[A.size()];
     Prefix[0]= A.get(0);
     Suffix[A.size()-1]=A.get(A.size()-1);
     for(int i=1; i<A.size();i++){
         Prefix[i]= gcd(Prefix[i-1],A.get(i));
         
     }
      for(int i=A.size()-2; i>=0;i--){
         Suffix[i]= gcd(Suffix[i+1],A.get(i));
         
     }
     
        for(int i=0;i<A.size();i++){
            
            if(i==0){
                if(i+1!=A.size())
                max1=Math.max(max1,Suffix[i+1]);
            }
            else if(i+1!=A.size()){
                max1=Math.max(max1,gcd(Suffix[i+1],Prefix[i-1]));
            }
            else if(i+1==A.size()){
                max1=Math.max(max1,Prefix[i-1]);
            }
        }
        return max1;
    }
}
